# Pine Script state persistence in the Lorentzian Classification algorithm

Pine Script's unique execution model creates specific patterns for state management that are crucial to understanding how the Lorentzian Classification algorithm maintains its machine learning arrays and predictions across trading bars. This deep technical analysis reveals how the algorithm leverages Pine Script's persistence mechanisms to implement a sophisticated k-nearest neighbors (KNN) classifier.

## The var keyword transforms Pine Script's default behavior

Pine Script executes once per historical bar and multiple times per real-time bar, with most variables resetting to their initial values on each execution. The `var` keyword fundamentally changes this behavior by creating variables that initialize only once and persist their values across all subsequent bars.

In the Lorentzian Classification algorithm, this distinction is critical. The feature arrays that store historical machine learning data are all declared with `var`:

```pinescript
var f1Array = array.new_float()
var f2Array = array.new_float()
var f3Array = array.new_float()
var f4Array = array.new_float()
var f5Array = array.new_float()
```

Without `var`, these arrays would be recreated as empty on every bar, making it impossible to maintain historical feature data. The algorithm's comment explicitly states these arrays "cannot be dynamically created within the FeatureArrays Object Initialization and thus must be set-up in advance," highlighting Pine Script's requirement for static declaration of persistent state containers.

## Feature arrays grow without bounds while predictions use sliding windows

The Lorentzian Classification implements a **dual array strategy** that demonstrates sophisticated state management. Feature arrays (f1Array through f5Array) grow indefinitely with each new bar:

```pinescript
array.push(f1Array, featureSeries.f1)
array.push(f2Array, featureSeries.f2)
```

These arrays never truncate, allowing the algorithm to access the complete historical dataset when calculating distances. This unlimited growth pattern enables the algorithm to search through all available historical data for the best neighbors.

In contrast, the predictions and distances arrays implement a **fixed-size circular buffer** pattern:

```pinescript
if array.size(predictions) > settings.neighborsCount
    lastDistance := array.get(distances, math.round(settings.neighborsCount*3/4))
    array.shift(distances)
    array.shift(predictions)
```

This sliding window mechanism maintains exactly k neighbors at all times. When new neighbors are added that exceed the desired count, `array.shift()` removes the oldest elements, implementing a first-in-first-out (FIFO) queue. The algorithm strategically sets `lastDistance` to the 75th percentile of current distances before shifting, creating a dynamic threshold that improves neighbor quality over time.

## Array operations maintain chronological order through strategic filtering

The algorithm ensures chronological diversity in its neighbor selection through a clever modulo operation:

```pinescript
for i = 0 to sizeLoop
    d = get_lorentzian_distance(i, settings.featureCount, featureSeries, featureArrays)
    if d >= lastDistance and i%4  // Only every 4th bar
        lastDistance := d
        array.push(distances, d)
        array.push(predictions, math.round(array.get(y_train_array, i)))
```

The `i%4` condition creates a minimum 4-bar spacing between selected neighbors, preventing temporal clustering. This pattern recognizes that adjacent bars in financial time series often contain redundant information. By enforcing chronological spacing, the algorithm ensures its k-nearest neighbors represent diverse market conditions rather than clustered recent history.

The training labels array (`y_train_array`) also uses `var` for persistence and grows without bounds, maintaining a complete record of all historical labels synchronized with the feature arrays. This synchronization is crucial for the algorithm's ability to look up the correct label for any historical feature vector.

## Variables persist or reset based on their analytical purpose

The algorithm demonstrates careful consideration in choosing which variables persist versus reset:

**Persistent variables (declared with `var`):**
- All feature arrays (f1Array through f5Array)
- Model state arrays (predictions, distances)
- Training data (y_train_array)
- Trade management counters (barsHeld)

**Non-persistent variables (reset each bar):**
- Current prediction value
- Trading signal
- Distance threshold (lastDistance)
- Temporary calculation variables

This distinction reflects each variable's role. Historical data and model state must persist to maintain continuity, while per-bar calculations should reset to ensure fresh computations. The `lastDistance` variable is particularly interesting - it resets each bar but gets dynamically set based on the current state of the distances array, creating an adaptive threshold mechanism.

## State persistence patterns reveal sophisticated ML architecture

The algorithm's state management follows a clear pattern that balances complete historical access with efficient computation:

```pinescript
// Step 1: Accumulate new features into unlimited arrays
array.push(f1Array, featureSeries.f1)
array.push(y_train_array, y_train_series)

// Step 2: Search through ALL historical data
for i = 0 to sizeLoop
    d = get_lorentzian_distance(i, settings.featureCount, featureSeries, featureArrays)

// Step 3: Maintain fixed-size active neighbor set
if array.size(predictions) > settings.neighborsCount
    array.shift(distances)
    array.shift(predictions)

// Step 4: Generate prediction from active neighbors
prediction := array.sum(predictions)
```

This architecture allows the algorithm to search through potentially thousands of historical patterns while maintaining a computationally efficient active set of k neighbors. The unlimited feature arrays provide the search space, while the limited predictions array provides the decision mechanism.

## Historical data access leverages Pine Script's automatic series management

Pine Script automatically maintains historical series for all variables, accessible through the `[]` operator:

```pinescript
y_train_series = src[4] < src[0] ? direction.short :
                src[4] > src[0] ? direction.long : direction.neutral
```

This creates labels based on whether price 4 bars in the future is higher or lower than current price. The `[4]` notation accesses the value 4 bars forward in time during historical processing, automatically handled by Pine Script's series infrastructure.

For accessing historical feature data, the algorithm uses array indexing:

```pinescript
get_lorentzian_distance(int i, ...) =>
    math.log(1+math.abs(featureSeries.f1 - array.get(featureArrays.f1, i)))
```

Here, `array.get(featureArrays.f1, i)` retrieves the historical feature value at position `i`, where `i` represents bars backward from the current position. This dual mechanism - series for recent history and arrays for deep history - provides flexible historical data access.

## Memory management balances completeness with platform constraints

Pine Script imposes strict memory limits (2MB for basic accounts, up to 128MB for premium), forcing careful memory management. The algorithm addresses this through several strategies:

**Selective bar processing:**
```pinescript
maxBarsBackIndex = last_bar_index >= settings.maxBarsBack ?
    last_bar_index - settings.maxBarsBack : 0
```

This limits the search space to a configurable number of recent bars, preventing memory exhaustion on long historical datasets.

**Efficient distance calculation:**
The Lorentzian distance function computes distances on-demand rather than storing a full distance matrix, trading computation for memory efficiency.

**Size-limited active sets:**
While feature arrays grow unbounded, the active predictions and distances arrays maintain fixed sizes, limiting memory growth for the decision-making components.

## State persistence directly impacts model accuracy and signal stability

The algorithm's state management creates several accuracy advantages:

1. **Complete historical search space** - Unlimited feature arrays allow finding the truly best neighbors across all available history
2. **Temporal diversity** - The 4-bar spacing prevents overfitting to recent market conditions
3. **Adaptive thresholding** - Dynamic distance thresholds improve neighbor quality over time
4. **Signal persistence** - The signal variable uses `nz(signal[1])` to maintain the previous signal when no new signal is generated, preventing flickering

The combination of comprehensive historical access and careful neighbor selection enables the algorithm to identify meaningful patterns while avoiding noise. The persistent state ensures these patterns remain accessible across the entire trading session.

## Converting to Python requires explicit state management

Pine Script's automatic state persistence creates significant challenges when converting to Python. Key differences include:

**Execution model:**
- Pine Script: Bar-by-bar execution with automatic state handling
- Python: Sequential execution requiring manual state management

**Variable persistence:**
- Pine Script: `var` keyword provides automatic persistence
- Python: Requires explicit class-based state or global variables

**Array management:**
- Pine Script: `array.push()` and `array.shift()` with built-in size tracking
- Python: Best replicated with `collections.deque(maxlen=n)` for automatic size limiting

**Historical access:**
- Pine Script: Automatic series with `close[n]` syntax
- Python: Requires manual indexing or pandas `shift()` operations

A successful Python implementation typically uses:
```python
from collections import deque

class LorentzianClassifier:
    def __init__(self, neighbors_count, max_bars_back):
        # Replicate var arrays
        self.f1_array = deque(maxlen=max_bars_back)
        self.predictions = deque(maxlen=neighbors_count)
        self.distances = deque(maxlen=neighbors_count)
```

The `deque` with `maxlen` provides O(1) append operations and automatic size management, closely matching Pine Script's array behavior. However, developers must manually handle the execution flow, state updates, and historical data access patterns that Pine Script manages automatically.

## The Lorentzian Classification demonstrates Pine Script ML mastery

This algorithm represents a sophisticated adaptation of machine learning concepts to Pine Script's unique environment. Its state management patterns - from dual array strategies to adaptive thresholding - show how trading algorithms can maintain complex state within platform constraints. The careful balance between complete historical access and computational efficiency, combined with strategic use of Pine Script's persistence mechanisms, enables real-time ML-based trading decisions that would be difficult to achieve with traditional technical indicators.

Understanding these state persistence patterns is crucial for anyone developing advanced Pine Script indicators or converting them to other platforms. The algorithm's innovative solutions to Pine Script's limitations provide a template for implementing other complex stateful computations in the TradingView environment.